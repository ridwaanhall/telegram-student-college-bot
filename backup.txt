server.py

import os
from flask import Flask, Response, request
from Controller.StudentController import ANSWERE, MESSAGE

app = Flask(__name__)
# Get BOT Token from telegram

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        msg = request.get_json()
        chat_id, incoming_que = MESSAGE.message_parser(msg)
        answer = ANSWERE.generate_answer(incoming_que)
        MESSAGE.send_message_telegram(chat_id, answer)
        return Response('ok', status=200)
    else:
        return "<h1>Something went wrong</h1>"

=======================
studentcontroler.py

import os, requests

token = os.environ['TELEGRAM_BOT_TOKEN']


class ANSWERE:
    @staticmethod
    def generate_answer(message):
        if message == message:
            url = f'https://api-student-colege.ridwaanhall.repl.co/{message}'
            response = requests.get(url)
            
            if response.status_code == 200:
                try:
                    return response.json()
                except ValueError:
                    return {"error": "No data available for the given query."}
            else:
                return {"error": "Unable to retrieve data from the API."}


class MESSAGE:
    @staticmethod
    def message_parser(message):
        chat_id = message['message']['chat']['id']
        text = message['message']['text']
        print("Chat ID: ", chat_id)
        print("Message: ", text)
        return chat_id, text

    @staticmethod
    def send_message_telegram(chat_id, text):
        url = f'https://api.telegram.org/bot{token}/sendMessage'
        payload = {
            'chat_id': chat_id,
            'text': text
        }
        response = requests.post(url, json=payload)
        return response


--------------------------------------------

import os, requests

token = os.environ['TELEGRAM_BOT_TOKEN']


class ANSWERE:
    @staticmethod
    def generate_answer(message):
        if message == message:  # This condition doesn't seem to be doing anything useful
            url = f'https://api-student-colege.ridwaanhall.repl.co/{message}'
            response = requests.get(url)
            
            if response.status_code == 200:
                mahasiswa_list = response.json()["mahasiswa"]
                result = ""

                for i, mahasiswa in enumerate(mahasiswa_list, start=1):
                    student_name = mahasiswa.get("student name", "N/A")
                    nim = mahasiswa.get("nim", "N/A")
                    study_program = mahasiswa.get("study program", "N/A")
                    college_name = mahasiswa.get("college name", "N/A")
                    detail = mahasiswa.get("detail", "N/A")

                    result += f"Name: {student_name}\nNIM: {nim}\nCollege: {college_name}\nDetail: {detail}\n\n"
                    #result += f"Student {i}:\nName: {student_name}\nNIM: {nim}\nStudy Program: {study_program}\nCollege: {college_name}\nDetail: {detail}\n\n"

                return result.strip()  # Remove trailing newline
            else:
                return {"error": "Unable to retrieve data from the API."}



class MESSAGE:
    @staticmethod
    def message_parser(message):
        chat_id = message['message']['chat']['id']
        text = message['message']['text']
        print("Chat ID: ", chat_id)
        print("Message: ", text)
        return chat_id, text

    @staticmethod
    def send_message_telegram(chat_id, text):
        url = f'https://api.telegram.org/bot{token}/sendMessage'
        payload = {
            'chat_id': chat_id,
            'text': text
        }
        response = requests.post(url, json=payload)
        return response



=======================================

data status kuliah

elif message.startswith("/"):
    url = f'https://api-student-colege.ridwaanhall.repl.co/detail_student/{message[1:]}'
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        dataumum = data.get("dataumum", {})
        datastatuskuliah = data.get("datastatuskuliah", [])

        result = f"Name: {dataumum.get('nm_pd', 'N/A')}\n" \
                 f"Gender: {dataumum.get('jk', 'N/A')}\n" \
                 f"nipd: {dataumum.get('nipd', 'N/A')}\n" \
                 f"Degree: {dataumum.get('namajenjang', 'N/A')}\n" \
                 f"Study Program: {dataumum.get('namaprodi', 'N/A')}\n" \
                 f"College Name: {dataumum.get('namapt', 'N/A')}\n" \
                 f"Sign Up Type: {dataumum.get('nm_jns_daftar', 'N/A')}\n" \
                 f"reg_pd: {dataumum.get('reg_pd', 'N/A')}\n" \
                 f"From College Name: {dataumum.get('nm_pt_asal', 'N/A')}\n" \
                 f"From SP Name: {dataumum.get('nm_prodi_asal', 'N/A')}\n" \
                 f"Desc Out: {dataumum.get('ket_keluar', 'N/A')}\n" \
                 f"Date Out: {dataumum.get('tgl_keluar', 'N/A')}\n" \
                 f"Serial Number Ijazah: {dataumum.get('no_seri_ijazah', 'N/A')}\n" \
                 f"Prof: {dataumum.get('sert_prof', 'N/A')}\n" \
                 f"Start: {dataumum.get('mulai_smt', 'N/A')}"

        if datastatuskuliah:
            result += "\n\nData Status Kuliah:\n"
            for status in datastatuskuliah:
                result += f"\nID: {status['id_smt']}\n" \
                          f"SKS: {status['sks_smt']}\n" \
                          f"nm_stat_mhs: {status['nm_stat_mhs']}\n"

        return result

    else:
        return "Data not Found!"



============================

data study


elif message.startswith("/"):
    url = f'https://api-student-colege.ridwaanhall.repl.co/detail_student/{message[1:]}'
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        dataumum = data.get("dataumum", {})
        datastatuskuliah = data.get("datastatuskuliah", [])
        datastudi = data.get("datastudi", [])

        result = f"Data Umum\n" \
                 f"Name: {dataumum.get('nm_pd', 'N/A')}\n" \
                 f"Gender: {dataumum.get('jk', 'N/A')}\n" \
                 f"nipd: {dataumum.get('nipd', 'N/A')}\n" \
                 f"Degree: {dataumum.get('namajenjang', 'N/A')}\n" \
                 f"Study Program: {dataumum.get('namaprodi', 'N/A')}\n" \
                 f"College Name: {dataumum.get('namapt', 'N/A')}\n" \
                 f"Sign Up Type: {dataumum.get('nm_jns_daftar', 'N/A')}\n" \
                 f"reg_pd: {dataumum.get('reg_pd', 'N/A')}\n" \
                 f"From College Name: {dataumum.get('nm_pt_asal', 'N/A')}\n" \
                 f"From SP Name: {dataumum.get('nm_prodi_asal', 'N/A')}\n" \
                 f"Desc Out: {dataumum.get('ket_keluar', 'N/A')}\n" \
                 f"Date Out: {dataumum.get('tgl_keluar', 'N/A')}\n" \
                 f"Serial Number Ijazah: {dataumum.get('no_seri_ijazah', 'N/A')}\n" \
                 f"Prof: {dataumum.get('sert_prof', 'N/A')}\n" \
                 f"Start: {dataumum.get('mulai_smt', 'N/A')}\n"

        if datastatuskuliah:
            result += "\nData Status Kuliah:\n"
            for status in datastatuskuliah:
                result += f"\nID: {status['id_smt']}\n" \
                          f"SKS: {status['sks_smt']}\n" \
                          f"nm_stat_mhs: {status['nm_stat_mhs']}\n"

        if datastudi:
            result += "\nData Study:\n"
            for study in datastudi:
                result += f"\nKode MK: {study['kode_mk']}\n" \
                          f"Name MK: {study['nm_mk']}\n" \
                          f"SKS: {study['sks_mk']}\n" \
                          f"ID SMT: {study['id_smt']}\n" \
                          f"Grade: {study['nilai_huruf']}\n"

        return result

    else:
        return "Data not Found!"


============================

font code

class MESSAGE:

    @staticmethod
    def send_message_telegram(chat_id, text):
        url = f'https://api.telegram.org/bot{token}/sendMessage'
        
        # Add Markdown format to the message
        text = f'```{text}```'
        
        payload = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'Markdown'  # Set parse_mode to Markdown
        }
        response = requests.post(url, json=payload)
        return response
